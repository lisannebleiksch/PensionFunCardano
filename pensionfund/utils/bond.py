import numpy as np
from typing import Any
from utils.pricer import Pricer


class Bond:
    """
    Represents a financial bond with methods to generate cash flows and calculate hedge ratios.

    Attributes:
        name (str): The name of the bond.
        coupon (float): The annual coupon rate of the bond (as a decimal, e.g., 0.05 for 5%).
        maturity (int): The number of years until the bond matures.
        interest_rate (float): The current interest rate used for pricing the bond.
        face_value (float): The face value of the bond. Defaults to 1.
        cash_flows (np.ndarray): Annual cash flows generated by the bond.
        times (np.ndarray): Array representing each year until maturity.
        pricer (Pricer): An instance of the Pricer class for bond valuation.
    """

    def __init__(
        self,
        name: str,
        coupon: float,
        maturity: int,
        interest_rate: float,
        face_value: float = 1.0,
    ) -> None:
        """
        Initializes a Bond instance with the provided parameters.

        Args:
            name (str): The name of the bond.
            coupon (float): The annual coupon rate of the bond (as a decimal, e.g., 0.05 for 5%).
            maturity (int): The number of years until the bond matures. Must be a positive integer.
            interest_rate (float): The current interest rate used for pricing the bond.
            face_value (float, optional): The face value of the bond. Defaults to 1.0.

        Raises:
            ValueError: If `maturity` is not a positive integer.
            ValueError: If `coupon` is not between 0 and 1.
        """
        if maturity <= 0:
            raise ValueError("Maturity must be a positive integer.")
        if not (0 <= coupon <= 1):
            raise ValueError("Coupon rate must be between 0 and 1.")

        self.name: str = name
        self.coupon: float = coupon
        self.maturity: int = maturity
        self.interest_rate: float = interest_rate
        self.face_value: float = face_value
        self.cash_flows: np.ndarray = self.generate_cash_flows()
        self.times: np.ndarray = np.arange(1, self.maturity + 1)
        self.pricer: Pricer = Pricer(self.cash_flows, self.times, self.interest_rate)

    def generate_cash_flows(self) -> np.ndarray:
        """
        Generates the annual cash flows for the bond.

        The cash flows consist of periodic coupon payments and the face value repayment at maturity.

        Returns:
            np.ndarray: An array of cash flows for each year until maturity.
        """
        cash_flows: np.ndarray = np.full(self.maturity, self.coupon * self.face_value)
        cash_flows[-1] += self.face_value  # Add face value to the final payment
        return cash_flows

    def calculate_hedge_ratio(self, liability_dv01: float, notional: float) -> float:
        """
        Calculates the hedge ratio based on the bond's DV01 and the liability's DV01.

        The hedge ratio determines the proportion of the bond position needed to hedge against interest rate changes.

        Args:
            liability_dv01 (float): The DV01 (Dollar Value of 01) of the liabilities.
            notional (float): The notional amount of the bond position.

        Returns:
            float: The calculated hedge ratio.

        Raises:
            ZeroDivisionError: If `liability_dv01` is zero, leading to a division by zero.
        """
        bond_dv01: float = self.pricer.dv01()
        if liability_dv01 == 0:
            raise ZeroDivisionError(
                "liability_dv01 cannot be zero when calculating hedge ratio."
            )
        hedge_ratio: float = (notional * bond_dv01) / liability_dv01
        return hedge_ratio
